name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B -U package

  docker:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    # 设置 JDK 并在 docker 作业内打包 JAR，确保构建上下文有可复制文件
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build app jar (skip tests)
      run: mvn -B -U -DskipTests package
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Alibaba Cloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/goodface-user
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/goodface-user:latest
          ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/goodface-user:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-ecs:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Prepare remote directory
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        key: ${{ secrets.ECS_SSH_KEY }}
        script: |
          sudo mkdir -p /opt/goodface-user

    - name: Copy docker-compose.yml to ECS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        key: ${{ secrets.ECS_SSH_KEY }}
        source: "deploy/docker-compose.yml"
        target: "/opt/goodface-user/"
        overwrite: true
        strip_components: 1

    - name: Deploy to ECS via SSH
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        key: ${{ secrets.ECS_SSH_KEY }}
        script: |
          set -e
          cd /opt/goodface-user
          echo "ACR_REGISTRY=${{ secrets.ACR_REGISTRY }}" > .env
          echo "ACR_NAMESPACE=${{ secrets.ACR_NAMESPACE }}" >> .env
          echo "IMAGE_TAG=${{ github.sha }}" >> .env
          echo "SPRING_PROFILES_ACTIVE=prod" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.USER_SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.USER_SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.USER_SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "SPRING_REDIS_HOST=${{ secrets.USER_SPRING_REDIS_HOST }}" >> .env
          echo "SPRING_REDIS_PORT=${{ secrets.USER_SPRING_REDIS_PORT }}" >> .env
          echo "DUBBO_REGISTRY_ADDRESS=${{ secrets.USER_DUBBO_REGISTRY_ADDRESS }}" >> .env
          echo "${{ secrets.ACR_PASSWORD }}" | sudo docker login ${{ secrets.ACR_REGISTRY }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin
          CF="docker-compose.yml"
          if [ ! -f "$CF" ] && [ -f "deploy/docker-compose.yml" ]; then CF="deploy/docker-compose.yml"; fi
          test -f "$CF" || (echo "compose file missing in $(pwd)" && ls -la && exit 1)
          sudo docker compose -f "$CF" --env-file .env pull
          sudo docker compose -f "$CF" --env-file .env up -d --remove-orphans
          # Ensure unified network exists and attach user container
          sudo docker network ls | grep -q goodface-net || sudo docker network create goodface-net
          sudo docker network connect goodface-net goodface-user || true